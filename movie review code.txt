# -----------------------------
# ðŸ“Œ Movie Rating Prediction
# -----------------------------

import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# 1. Load dataset
df = pd.read_csv("IMDb Movies India.csv")

# 2. Clean data
df = df.dropna(subset=["Rating"])  # remove missing target
df["Year"] = df["Year"].astype(str).str.extract(r'(\d{4})')
df["Year"] = pd.to_numeric(df["Year"], errors="coerce")
df["Duration"] = df["Duration"].astype(str).str.replace(" min", "")
df["Duration"] = pd.to_numeric(df["Duration"], errors="coerce")
df["Votes"] = pd.to_numeric(df["Votes"], errors="coerce")
df = df.dropna(subset=["Year", "Duration", "Votes"]).reset_index(drop=True)

# 3. Encode Genres (multi-label one hot)
df["Genre"] = df["Genre"].fillna("").apply(lambda x: x.split(","))
mlb = MultiLabelBinarizer()
genre_encoded = pd.DataFrame(mlb.fit_transform(df["Genre"]), columns=mlb.classes_)
df = pd.concat([df, genre_encoded], axis=1)

# 4. Encode Director & Actors (keep top 50 only)
for col in ["Director", "Actor 1", "Actor 2", "Actor 3"]:
    top_values = df[col].value_counts().index[:50]
    df[col] = df[col].apply(lambda x: x if x in top_values else "Other")
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))

# 5. Scale numerical features
scaler = StandardScaler()
df[["Year", "Duration", "Votes"]] = scaler.fit_transform(df[["Year", "Duration", "Votes"]])

# 6. Train-test split
X = df.drop(columns=["Name", "Rating", "Genre"])
y = df["Rating"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 7. Train Models
# (a) Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# (b) Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# 8. Evaluate Models
def evaluate(y_true, y_pred, model_name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    print(f"\nðŸ“Š {model_name} Results:")
    print(f"MAE  = {mae:.3f}")
    print(f"RMSE = {rmse:.3f}")
    print(f"RÂ²   = {r2:.3f}")

evaluate(y_test, y_pred_lr, "Linear Regression")
evaluate(y_test, y_pred_rf, "Random Forest")
